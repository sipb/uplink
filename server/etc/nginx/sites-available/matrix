##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
		#	include snippets/fastcgi-php.conf;
		#
		#	# With php-fpm (or other unix sockets):
		#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		#	# With php-cgi (or other tcp sockets):
		#	fastcgi_pass 127.0.0.1:9000;
		#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
		#	deny all;
		#}
}


server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	# Modified for element
	root /var/www/html/element;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;
	server_name uplink.mit.edu; # managed by Certbot


	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
		#	include snippets/fastcgi-php.conf;
		#
		#	# With php-fpm (or other unix sockets):
		#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		#	# With php-cgi (or other tcp sockets):
		#	fastcgi_pass 127.0.0.1:9000;
		#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
		#	deny all;
		#}


	listen [::]:443 ssl ipv6only=on; # managed by Certbot
	listen 443 ssl; # managed by Certbot

	# Element
	add_header X-Frame-Options SAMEORIGIN;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";
	add_header Content-Security-Policy "frame-ancestors 'none'";

	# Matrix
	listen 8448 ssl http2 default_server;
	listen [::]:8448 ssl http2 default_server;

	# Disable account deactivation
        location ~ ^/_matrix/client/.+/account/deactivate {
                return 403;
        }

	# when administering, add /_synapse/admin (TODO: remove)
	location ~ ^(/_matrix|/_synapse/client|/_synapse/admin) {
		# note: do not add a path (even a single /) after the port in `proxy_pass`,
		# otherwise nginx will canonicalise the URI and cause signature verification
		# errors.
		proxy_pass http://localhost:8008;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Host $host;

		# Nginx by default only allows file uploads up to 1M in size
		# Increase client_max_body_size to match max_upload_size defined in homeserver.yaml
		client_max_body_size 50M;

		# Synapse responses may be chunked, which is an HTTP/1.1 feature.
		proxy_http_version 1.1;
	}

	# Redirect Shibboleth too! For Touchstone auth
	#location ~ ^(/Shibboleth.sso) {
		# If I use localhost, it gives an error
		# In theory, HTTP could work so nginx would do the HTTPS and not apache2
		# by setting handlerSSL="false" in shibboleth2.xml, but I could only get it to return 404 on HTTP
	#	proxy_pass https://localhost:444;
	#}

	# Workaround registering new SP to IS&T by pretending Synapse is Shibboleth
	location /Shibboleth.sso/SAML2/POST {
		return 307 https://uplink.mit.edu/_synapse/client/saml2/authn_response;
	}

	ssl_certificate /etc/letsencrypt/live/uplink.mit.edu/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/uplink.mit.edu/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
	if ($host = uplink.mit.edu) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	listen 80 ;
	listen [::]:80 ;
	server_name uplink.mit.edu;
	return 404; # managed by Certbot


}
